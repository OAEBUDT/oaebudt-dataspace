# This workflow builds the connector project and executes E2E tests using Gradle. It is triggered by pull request
# openings and synchronization, ensuring that the changes introduced by the PR are validated and do not break the
# connector's functionality.

name: Connector PR Validation

on:
  push:
    branches:
      - "develop"
  pull_request:
    branches:
      - "develop"
    types: [opened, reopened, synchronize]
    paths:
      - "connector/**"
      - "!**.md"
      - "!docs/**"
      - "!CODEOWNERS"
      - "!LICENSE"
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-test:
    name: Build and Test Connector
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./connector  # Set default working directory for all run steps

    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: +security-and-quality

      - name: Compile
        run: ./gradlew compileJava --no-daemon

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and sonar analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

      - name: Run E2E Tests
        run: ./gradlew test -DincludeTags="EndToEndTest"

      - name: Publish E2E Tests Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: E2E Tests Results
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: 'false'

      - name: Upload test results
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            connector/tests/build/reports/tests/
            connector/tests/build/test-results/
          retention-days: 7
